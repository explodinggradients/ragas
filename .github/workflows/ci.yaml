name: CI

on:
  pull_request:

permissions:
  contents: read

env:
  LINES: 120
  COLUMNS: 120

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#defaultsrun
defaults:
  run:
    shell: bash --noprofile --norc -exo pipefail {0}

jobs:
  diff:
    runs-on: ubuntu-latest
    outputs:
      related: ${{ steps.filter.outputs.related }}
      ragas: ${{ steps.filter.outputs.ragas }}
      ragas_experimental: ${{ steps.filter.outputs.ragas_experimental }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: "main"
          token: ${{ github.token }}
          filters: |
            related: &related
              - .github/workflows/ci.yaml
              - codecov.yml
              - pyproject.toml
              - requirements/test.txt
              - Makefile
            ragas:
              - *related
              - "ragas/src/ragas/**"
              - "ragas/tests/**"
            ragas_experimental:
              - *related
              - "experimental/ragas_experimental/**"
              - "experimental/tests/**"
              - "experimental/pyproject.toml"
            docs:
              - *related
              - requirements/docs-requirements.txt
              - "docs/**"

  unit_tests:
    needs:
      - diff

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.ragas == 'true') || github.event_name == 'push' }}
    name: python${{ matrix.python-version }}_unit_tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all tags and branches

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.os == 'macos-latest' && 'arm64' || 'x64' }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip dependencies
        uses: actions/cache@v4
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-tests-${{ hashFiles('requirements/test.txt') }}

      - name: Install dependencies
        run: |
          uv pip install --system -e "./ragas[dev]"

      - name: Run unit tests
        run: |
          # OPTS=(--cov-config pyproject.toml --cov=src/bentoml --cov-append)
          if [ "${{ matrix.os }}" != 'windows-latest' ]; then
            # we will use pytest-xdist to improve tests run-time.
            OPTS=(--dist loadfile -n auto)
          fi
          # Now run the unit tests
          cd ragas && uv run pytest --nbmake tests/unit "${OPTS[@]}"
        env:
          __RAGAS_DEBUG_TRACKING: true
          RAGAS_DO_NOT_TRACK: true

  experimental_tests:
    needs:
      - diff

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12"]

    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.ragas_experimental == 'true') || github.event_name == 'push' }}
    name: python${{ matrix.python-version }}_experimental_tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all tags and branches

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip dependencies
        uses: actions/cache@v4
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-experimental-${{ hashFiles('experimental/pyproject.toml') }}

      - name: Install dependencies
        run: |
          uv pip install --system -e "./ragas[dev]"
          cd experimental && uv pip install --system -e ".[dev]"

      - name: Run experimental tests
        run: |
          cd experimental && uv run pytest -v --tb=short
        env:
          __RAGAS_DEBUG_TRACKING: true
          RAGAS_DO_NOT_TRACK: true

  code_quality_check:
    runs-on: ubuntu-latest
    needs:
      - diff

    if: ${{ (github.event_name == 'pull_request' && (needs.diff.outputs.ragas == 'true' || needs.diff.outputs.ragas_experimental == 'true')) || github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: x64

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Get pip cache dir
        id: cache-dir
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip dependencies
        uses: actions/cache@v4
        id: cache-pip
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: codestyle-${{ hashFiles('requirements/dev.txt') }}

      - name: Install dependencies
        run: |
          uv pip install --system -e "./ragas[dev]"
          cd experimental && uv pip install --system -e ".[dev]"

      - name: Format check (dry run)
        run: |
          # Check if code is properly formatted (without making changes)
          echo "Checking ragas formatting..."
          uv run black --check --config ragas/pyproject.toml ragas/src ragas/tests docs
          uv run ruff check ragas/src docs ragas/tests
          echo "Checking experimental formatting..."
          cd experimental && uv run black --check ragas_experimental && uv run ruff check ragas_experimental

      - name: Type check
        run: make type
