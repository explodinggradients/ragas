[project]
name = "ragas"
description = "Evaluation framework for RAG and LLM applications"
requires-python = ">=3.9"
license = {file = "LICENSE"}
dependencies = [
    # Core dependencies
    "numpy",
    "datasets",
    "tiktoken",
    "pydantic>=2.0.0",
    "nest-asyncio",
    "appdirs",
    "diskcache>=5.6.3",
    
    # LangChain ecosystem
    "langchain",
    "langchain-core",
    "langchain-community",
    "langchain_openai",
    
    # CLI dependencies
    "typer",
    "rich",
    
    # LLM providers
    "openai>=1.0.0",
    
    # Experimental features
    "tqdm",
    "instructor",
    "gitpython",
    "pillow>=10.4.0",
]
dynamic = ["version", "readme"]

[project.urls]
Homepage = "https://github.com/explodinggradients/ragas"
Documentation = "https://docs.ragas.io"
Code = "https://github.com/explodinggradients/ragas"
Issues = "https://github.com/explodinggradients/ragas/issues"

[project.optional-dependencies]
# Core optional features
all = [
    "sentence-transformers",
    "transformers",
    "nltk",
    "rouge_score",
    "rapidfuzz",
    "pandas",
    "datacompy",
    "sacrebleu",
    "llama_index",
    "r2r"
]

# Specific integrations
examples = ["openai>=1.0.0"]
tracing = ["langfuse>=3.2.4", "mlflow>=3.1.4"]
gdrive = [
    "google-api-python-client>=2.178.0",
    "google-auth>=2.40.3",
    "google-auth-oauthlib>=1.2.2"
]
ai-frameworks = ["haystack-ai"]

test = []
[project.entry-points."ragas.backends"]
"local/csv" = "ragas.backends.local_csv:LocalCSVBackend"
"local/jsonl" = "ragas.backends.local_jsonl:LocalJSONLBackend"
"inmemory" = "ragas.backends.inmemory:InMemoryBackend"
"gdrive" = "ragas.backends.gdrive_backend:GDriveBackend"

[project.scripts]
ragas = "ragas.cli:app"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.dynamic]
readme = {file = ["README.md"], content-type = "text/markdown"}

# Ruff configuration is inherited from workspace.toml at the monorepo root

[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
# Path to version file relative to this pyproject.toml
version_file = "src/ragas/_version.py"
# Point to the repository root (one level up)
root = ".."

[tool.pytest.ini_options]
addopts = "-n 0"
asyncio_default_fixture_loop_scope = "function"
[pytest]
testpaths = ["tests"]
markers = [
    "experimental_ci: Set of tests that will be run as part of Experimental CI",
    "e2e: End-to-End tests for Experimental",
]

[dependency-groups]
dev = [
    "ruff",
    "pyright>=1.1.403",
    "pre-commit>=4.3.0",
    "pytest",
    "pytest-xdist[psutil]",
    "pytest-asyncio",
    "nbmake",
    "notebook",
    "arize-phoenix>=6.1.0",
    "openinference-instrumentation-langchain>=0.1.29",
    "ragas[all,tracing,gdrive,ai-frameworks]",
    "build>=1.3.0",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material",
    "mkdocs-material[imaging]",
    "mkdocstrings[python]",
    "mkdocs-glightbox",
    "mkdocs-autorefs",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
    "mkdocs-git-committers-plugin-2",
    "mkdocs-git-revision-date-localized-plugin",
]
